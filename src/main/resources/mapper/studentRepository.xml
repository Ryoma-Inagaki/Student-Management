<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="standard.StudentManagement.repository.StudentRepository">

  <!-- 受講生の全件検索 -->
  <select id="searchStudent" resultType="standard.StudentManagement.data.Student">
    SELECT * FROM students WHERE is_deleted = false
  </select>

  <!-- 受講生の検索 -->
  <select id="searchStudentById" resultType="standard.StudentManagement.data.Student">
    SELECT id, name, kana_name, nickname, email, area, age, sex, remark, is_deleted AS deleted FROM
    students WHERE id = #{id}
  </select>

  <!-- 申込状況付きの受講生コース情報の全件検索 -->
  <resultMap id="StudentCourseWithStatusMap" type="standard.StudentManagement.data.StudentCourse">
    <id property="id" column="id"/>
    <result property="studentId" column="student_id"/>
    <result property="courseName" column="course_name"/>
    <result property="startAt" column="start_at"/>
    <result property="endAt" column="end_at"/>
    <association property="applicationStatus" javaType="standard.StudentManagement.data.ApplicationStatus">
      <id property="id" column="status_id"/>
      <result property="studentCourseId" column="student_course_id"/>
      <result property="status" column="status"/>
      <result property="statusId" column="status_type_id"/>
    </association>
  </resultMap>

  <select id="searchStudentCourseList" resultMap="StudentCourseWithStatusMap">
    SELECT
    sc.id,
    sc.student_id,
    sc.course_name,
    sc.start_at,
    sc.end_at,
    a.id AS status_id,
    a.student_course_id,
    a.status,
    a.status_id AS status_type_id
    FROM students_courses sc
    LEFT JOIN application_statuses a ON sc.id = a.student_course_id
  </select>

  <!-- 受講生IDで受講生コース検索 -->
  <select id="searchStudentCourseListByStudentId"
    resultType="standard.StudentManagement.data.StudentCourse">
    SELECT * FROM students_courses WHERE student_id = #{studentId}
  </select>

  <!-- 受講生コースIDから申込状況を取得 -->
  <select id="searchApplicationStatusByStudentCourseId"
    resultType="standard.StudentManagement.data.ApplicationStatus" parameterType="int">
    SELECT id, student_course_id AS studentCourseId, status, status_id
    FROM application_statuses
    WHERE student_course_id = #{studentCourseId}
  </select>

  <!-- 受講生の登録 -->
  <insert id="registerStudent">
    INSERT INTO students (id, name, kana_name, nickname, email, area, age, sex, remark, is_deleted)
    VALUES (#{id}, #{name}, #{kanaName}, #{nickname}, #{email}, #{area}, #{age}, #{sex}, #{remark},
    false)
  </insert>

  <!-- 受講生コースの登録 -->
  <insert id="registerStudentCourseList" useGeneratedKeys="true" keyProperty="id">
    INSERT INTO students_courses (student_id, course_name, start_at, end_at)
    VALUES (#{studentId}, #{courseName}, #{startAt}, #{endAt})
  </insert>

  <!-- 申込状況の登録 -->
  <insert id="registerApplicationStatus"
    parameterType="standard.StudentManagement.data.ApplicationStatus" useGeneratedKeys="false">
    INSERT INTO application_statuses (id, student_course_id, status, status_id)
    VALUES (#{id}, #{studentCourseId}, #{status}, #{statusId})
  </insert>

  <!-- 受講生情報の更新 -->
  <update id="updateStudent">
    UPDATE students
    SET name = #{name}, kana_name = #{kanaName}, nickname = #{nickname},
    email = #{email}, area = #{area}, age = #{age}, sex = #{sex},
    remark = #{remark}, is_deleted = #{deleted}
    WHERE id = #{id}
  </update>

  <!-- 受講生コース情報の更新 -->
  <update id="updateStudentCourseList">
    UPDATE students_courses
    SET course_name = #{courseName}
    WHERE id = #{id}
  </update>

  <!-- 申込状況の更新 -->
  <update id="updateApplicationStatus"
    parameterType="standard.StudentManagement.data.ApplicationStatus">
    UPDATE application_statuses
    SET status = #{status}, status_id = #{statusId}
    WHERE id = #{id}
  </update>

  <resultMap id="StudentResultMap" type="standard.StudentManagement.data.Student">
    <id property="id" column="id"/>
    <result property="name" column="name"/>
    <result property="kanaName" column="kana_name"/>
    <result property="nickname" column="nickname"/>
    <result property="email" column="email"/>
    <result property="area" column="area"/>
    <result property="age" column="age"/>
    <result property="sex" column="sex"/>
    <result property="remark" column="remark"/>
    <result property="deleted" column="is_deleted"/>
  </resultMap>

  <select id="searchStudentByCondition"
    resultMap="StudentResultMap"
    parameterType="standard.StudentManagement.domain.StudentSearchCondition">

    SELECT DISTINCT s.id, s.name, s.kana_name, s.nickname, s.email, s.area, s.age, s.sex, s.remark, s.is_deleted
    FROM students s
    LEFT JOIN students_courses sc ON s.id = sc.student_id
    LEFT JOIN application_statuses a ON sc.id = a.student_course_id

    <where>
      <if test="name != null and name != ''">
        AND s.name LIKE CONCAT('%', #{name}, '%')
      </if>
      <if test="email != null and email != ''">
        AND s.email LIKE CONCAT('%', #{email}, '%')
      </if>
      <if test="area != null and area != ''">
        AND s.area LIKE CONCAT(#{area}, '%')
      </if>
      <if test="deleted != null">
        AND s.is_deleted = #{deleted}
      </if>
      <if test="minAge != null and minAge != ''">
        AND s.age &gt;= #{minAge}
      </if>
      <if test="maxAge != null and maxAge != ''">
        AND s.age &lt;= #{maxAge}
      </if>
      <if test="sex != null and sex != ''">
        AND s.sex = #{sex}
      </if>
      <if test="courseName != null and courseName != ''">
        AND sc.course_name = #{courseName}
      </if>
      <if test="status != null and status != ''">
        AND a.status = #{status}
      </if>
    </where>

  </select>

</mapper>